@inherits AutoRest.Core.Template<AutoRest.CSharp.LoadBalanced.Legacy.Model.CodeModelCs>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using Newtonsoft.Json;
using System.Threading.Tasks;
using Agoda.RoundRobin;
using Agoda.RoundRobin.Constants;
using Microsoft.Rest;
using Microsoft.Rest.Serialization;
using System.Linq;
using AutoRest.CSharp.LoadBalanced.Json;

@EmptyLine
namespace @Settings.Namespace
{
@EmptyLine
    public class MetricSendEventArgs : EventArgs
    {
        public long ElapsedMilliseconds { get; set; }
        public string Name { get; set; }
        public Dictionary<string, object> Tags { get; set; }
    }
@EmptyLine
    public class ErrorEventArgs : EventArgs
    {
        public Exception Exception { get; set; }
        public string RouteName { get; set; }
        public ExecuteResult ExecuteResult { get; set; }
        public object Payload { get; set; }
    }
@EmptyLine
    public interface IApiBaseConfig
    {
        string name { get; set; }
        List<ServerSettings> settings { get; set; }
        TimeSpan? timeout { get; set; }
        int retryCount { get; set; }
        bool? manualCalcUris { get; set; }
        bool? overrideHostHeader { get; set; }
        JsonSerializerSettings serializationSettings { get; set; }
        JsonSerializerSettings deserializationSettings { get; set; }
        EventHandler<MetricSendEventArgs> metricEvent { get; set; }
        EventHandler<ErrorEventArgs> errorEvent { get; set; }
    }
@EmptyLine
    public class ApiBaseConfig : IApiBaseConfig
    {
        public string name { get; set; }
        public List<ServerSettings> settings { get; set; }
        public TimeSpan? timeout { get; set; }
        public int retryCount { get; set; }
        public bool? manualCalcUris { get; set; }
        public bool? overrideHostHeader { get; set; }
        public JsonSerializerSettings serializationSettings { get; set; }
        public JsonSerializerSettings deserializationSettings { get; set; }
        public EventHandler<MetricSendEventArgs> metricEvent { get; set; }
        public EventHandler<ErrorEventArgs> errorEvent { get; set; }
    }
@EmptyLine
    public abstract class ApiBase
    {
        private readonly List<ServerSettings> _settings;
        private JsonSerializerSettings _serializationSettings;
        private JsonSerializerSettings _deserializationSettings;
        private readonly TimeSpan _timeout;
        private readonly int _retryCount;
        private readonly bool _manualCalcUris;
        private readonly bool _overrideHostHeader;
        private readonly string _name;
        private event EventHandler<MetricSendEventArgs> _metricSendEvent;
        private event EventHandler<ErrorEventArgs> _errorEvent;
@EmptyLine
        protected ApiBase(IApiBaseConfig apiBaseConfig)
        {
            _name = apiBaseConfig.name;
            _timeout = apiBaseConfig.timeout ?? TimeSpan.FromMilliseconds(1000);
            _settings = apiBaseConfig.settings;
            _retryCount = apiBaseConfig.retryCount;
            _manualCalcUris = apiBaseConfig.manualCalcUris ?? false;
            _overrideHostHeader = apiBaseConfig.overrideHostHeader ?? false;
            _serializationSettings = apiBaseConfig.serializationSettings;
            _deserializationSettings = apiBaseConfig.deserializationSettings;

            if (apiBaseConfig.metricEvent != null)
                _metricSendEvent += apiBaseConfig.metricEvent;
            if (apiBaseConfig.errorEvent != null)
                _errorEvent += apiBaseConfig.errorEvent;
        }
@EmptyLine
        public virtual JsonSerializerSettings SerializationSettings =>
            _serializationSettings ?? (_serializationSettings =
                new JsonSerializerSettings
                {
                    Formatting = Formatting.Indented,
                    DateFormatHandling = DateFormatHandling.IsoDateFormat,
                    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    ContractResolver = new ReadOnlyJsonContractResolver(),
                    MetadataPropertyHandling = MetadataPropertyHandling.ReadAhead,
                    Converters = new List<JsonConverter> { new Iso8601TimeSpanConverter(),
                        new BooleanStringConverter(BooleanConverterOptions.WriteAsInt),
                        new MoneyConverter(MoneyConverterOptions.SendAsText)
                    }
                });

@EmptyLine
        public virtual JsonSerializerSettings DeserializationSettings =>
            _deserializationSettings ?? (_deserializationSettings =
                new JsonSerializerSettings
                {
                    DateFormatHandling = DateFormatHandling.IsoDateFormat,
                    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    ContractResolver = new ReadOnlyJsonContractResolver(),
                    MetadataPropertyHandling = MetadataPropertyHandling.ReadAhead,
                    Converters = new List<JsonConverter> { new Iso8601TimeSpanConverter(),
                        new BooleanStringConverter(BooleanConverterOptions.WriteAsInt)
                    }
                });
@EmptyLine
        protected async Task InvokeNewRequest(string metricName, RequestParameters parameters)
        {
            await InvokeNewRequest<dynamic>(metricName, parameters);
        }
@EmptyLine
        protected async Task<TResult> InvokeNewRequest<TResult>(string metricName, RequestParameters parameters)
        {
            var watch = Stopwatch.StartNew();
            ExecuteResult executeResult = null;
            try
            {
                var request = new HttpRequestCommand(
                            _name,
                            _settings,
                            _timeout,
                            _retryCount,
                            SerializationSettings,
                            parameters.HttpVerb,
                            parameters.RestUrl,
                            parameters.QueryParameters,
                            parameters.CustomHeaders,
                            parameters.Body,
                            _manualCalcUris,
                            _overrideHostHeader);

                executeResult = await request.ExecuteAsync();

                var statusCode = executeResult.Status;
                var responseContent = executeResult.Results;

                if (!executeResult.IsSuccessStatus)
                {
                    if (string.IsNullOrEmpty(responseContent))
                    {
                        throw executeResult.GetExeptions();
                    }
			
                    switch (statusCode)
                    {
                        case 400:
                            var brokenRulesDto = JsonConvert.DeserializeObject<ValidationError>(responseContent, DeserializationSettings);
                            throw new BadRequestException(brokenRulesDto);
                        case -3:
                            var brokenRulesDtoInner = JsonConvert.DeserializeObject<ValidationError>(
                                executeResult.Exceptions.FirstOrDefault()?.Message, DeserializationSettings);
                            throw new BadRequestException(brokenRulesDtoInner);
                        default:
                            throw executeResult.GetExeptions();
                    }
                }

                try
                {
                    var responseDto = JsonConvert.DeserializeObject<TResult>(responseContent, DeserializationSettings);
                    return responseDto;
                }
                catch (Exception ex)
                {
                    throw new Exception("Operation returned unexpected DTO type or invalid unsupported format", ex);
                }
            }
            catch (Exception ex)
            {
                _errorEvent?.Invoke(this, new ErrorEventArgs { Exception = ex, RouteName = metricName, ExecuteResult = executeResult, Payload = parameters});
                throw;
            }
            finally
            {
                var tags = new Dictionary<string, object>();

                if (executeResult != null)
                {
                    tags.Add("RetryCount", executeResult.RetryCount);
                    tags.Add("Status", executeResult.Status);
                    tags.Add("TotalReceivedBytes", executeResult.TotalReceivedBytes);
                    tags.Add("Uri", executeResult.Uri);
                }

                _metricSendEvent?.Invoke(this,
                    new MetricSendEventArgs
                    {
                        Name = metricName,
                        ElapsedMilliseconds = watch.ElapsedMilliseconds,
                        Tags = tags
                    });
            }
        }
@EmptyLine

        public class RequestParameters
        {
            public Verbs HttpVerb { get; set; }
            public string RestUrl { get; set; }
            public Dictionary<string, object> QueryParameters { get; set; }
            public Dictionary<string, string> CustomHeaders { get; set; }
            public object Body { get; set; }
        }
@EmptyLine

        public class HttpRequestCommand
        {
            private const string JsonContentType = "application/vnd.api+json";
            private readonly string _contentType;
            private readonly string _name;
            private readonly Verbs _verb;
            private readonly Lazy<string> _url;
            private readonly Dictionary<string, string> _customHeaders;
            private readonly Lazy<byte[]> _requestContent;
            private readonly JsonSerializerSettings _serializationSettings;
            private readonly List<ServerSettings> _settings;
            private readonly int _retryCount;
            private readonly TimeSpan _timeout;
            private readonly bool _manualCalcUris;
            private readonly bool _overrideHostHeader;

            internal HttpRequestCommand(
                string name,
                List<ServerSettings> settings,
                TimeSpan timeout,
                int retryCount,
                JsonSerializerSettings serializationSettings,
                Verbs httpVerb,
                string restUrl,
                Dictionary<string, object> queryParameters,
                Dictionary<string, string> customHeaders = null,
                object body = null,
                bool manualCalcUris = false,
                bool overrideHostHeader = false)
            {
                _manualCalcUris = manualCalcUris;
                _overrideHostHeader = overrideHostHeader;
                if (customHeaders != null && customHeaders.ContainsKey("Content-Type"))
                {
                    _contentType = customHeaders["Content-Type"];
                }
                else
                {
                    _contentType = JsonContentType;
                }
                _name = name;
                _timeout = timeout;
                _retryCount = retryCount;
                _settings = settings;
                _verb = httpVerb;
                _url = new Lazy<string>(() => GetUrl(httpVerb, restUrl, queryParameters));
                _serializationSettings = serializationSettings;
                _customHeaders = customHeaders;

                if(body == null)
				{
					_requestContent = new Lazy<byte[]>(() => new byte[0]);
				}
				else
				{				
					var textContent = body as string;
					
					if(textContent == null)
					{
						_requestContent = new Lazy<byte[]>(() => 
							Encoding.UTF8.GetBytes(SafeJsonConvert.SerializeObject(body, _serializationSettings)));    
					}
					else
					{
                        _requestContent = new Lazy<byte[]>(() => Encoding.UTF8.GetBytes(textContent));
					}
				}
            }
@EmptyLine
            internal async Task<ExecuteResult> ExecuteAsync()
            {
                var timeout = (int)_timeout.TotalMilliseconds;
                var requestContent = (_requestContent.Value.Length > 0) ? _requestContent.Value : null;
                var httpClient = new HttpClient(_name, _settings, JsonContentType, timeout, _retryCount, "", manualCalcUris: _manualCalcUris, overrideHostHeader: _overrideHostHeader);
                
                // this will need to be called async as part of a client update. This because of
                // unexpected deadlocks when using the current implementation.
                var task = Task.Run(
                    () => httpClient.ExecuteAsync(
                        _verb,
                        _url.Value.TrimStart('/'),
                        requestContent,
                        false,
                        new ErrorList(),
                        true,
                        _customHeaders));
                task.Wait();                
                return task.Result;
            }

@EmptyLine
            protected string GetUrl(Verbs verb, string restUrl, IDictionary<string, object> queryParameters)
            {
                var path = restUrl;
                var query = new Dictionary<string, string>();

                // Substitute the path parameters.
                foreach (var parameterName in queryParameters.Keys)
                {
                    var rawValue = queryParameters[parameterName];
                    if (parameterName == "body" || rawValue == null ) 
		            {
			            continue;
		            }
		            string jsonValue;

                    // Booleans must be passed as true and false words, using Newtonsoft converter,
                    // rather than 0 and 1 integers, using Microsoft converter.
                    if (rawValue is bool)
                    {
                        jsonValue = JsonConvert.SerializeObject(rawValue);
                    }
                    else
                    {
                        jsonValue = SafeJsonConvert
                            .SerializeObject(rawValue, _serializationSettings)
                            .Trim('"');
                    }

                    var urlValue = Uri.EscapeDataString(jsonValue);
                    var placeholder = $"{{{parameterName}}}";

                    if (path.Contains(placeholder))
                    {
                        path = path.Replace(placeholder, urlValue);
                    }
                    else
                    {
                        query[parameterName] = urlValue;
                    }
                }
                var uriBuilder = new UriBuilder(null, null, -1, path);

                //ignore body parameter when appending query parameter in URL
                uriBuilder.Query = string.Join("&", query.Select(parameter =>
                {
                
#if NETSTANDARD2_0

                    var name = HttpUtility.UrlEncode(parameter.Key);
#else
                    var name = WebUtility.UrlEncode(parameter.Key);
#endif
                var value = parameter.Value;
                return $"{name}={value}";
                }));

                return uriBuilder.ToString();
            }
        }
    }
}
