@inherits AutoRest.Core.Template<AutoRest.CSharp.LoadBalanced.Model.CodeModelCs>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using Newtonsoft.Json;
using Microsoft.Rest;
using System.Threading.Tasks;
using Agoda.RoundRobin;
using Agoda.RoundRobin.Constants;
using Microsoft.Rest.Serialization;
@EmptyLine
namespace @Settings.Namespace
{
    @EmptyLine
    public class Version
    {
        public const string ApiVersion = "@(Model.ApiVersion)";
    }
@EmptyLine
    public class ErrorEventArgs : EventArgs
    {
        public Exception Exception { get; set; }
        public string RouteName { get; set; }
        public ExecuteResult ExecuteResult { get; set; }
        public object Payload { get; set; }
    }
@EmptyLine
    public interface IApiBaseConfig
    {
        string name { get; set; }
        List<ServerSettings> settings { get; set; }
        TimeSpan? timeout { get; set; }
        int retryCount { get; set; }
        bool? manualCalcUris { get; set; }
        bool? overrideHostHeader { get; set; }
        JsonSerializerSettings serializationSettings { get; set; }
        JsonSerializerSettings deserializationSettings { get; set; }
        Dictionary<string, string> customHeaders {get; set;}
        bool? ignoreSslPolicyErrors { get; set; }
    }

    public class ApiBaseConfig : IApiBaseConfig
    {
        public string name { get; set; }
        public List<ServerSettings> settings { get; set; }
        public TimeSpan? timeout { get; set; }
        public int retryCount { get; set; }
        public bool? manualCalcUris { get; set; }
        public bool? overrideHostHeader { get; set; }
        public JsonSerializerSettings serializationSettings { get; set; }
        public JsonSerializerSettings deserializationSettings { get; set; }
        public Dictionary<string, string> customHeaders {get; set;}
        public bool? ignoreSslPolicyErrors { get; set; }
    }

    public abstract class ApiBase
    {
        private readonly List<ServerSettings> _settings;
        private JsonSerializerSettings _serializationSettings;
        private JsonSerializerSettings _deserializationSettings;
        private readonly TimeSpan _timeout;
        private readonly int _retryCount;
        private readonly bool _manualCalcUris;
        private readonly bool _overrideHostHeader;
        private readonly string _name;
        public readonly Dictionary<string, string> _customHeaders;
        private event EventHandler<MetricSendEventArgs> _metricSendEvent;
        private event EventHandler<ErrorEventArgs> _errorEvent;
        private readonly bool _ignoreSslPolicyErrors;
@EmptyLine
        protected ApiBase(IApiBaseConfig apiBaseConfig)
        {
            _name = apiBaseConfig.name;
            _timeout = apiBaseConfig.timeout ?? TimeSpan.FromMilliseconds(1000);
            _settings = apiBaseConfig.settings;
            _retryCount = apiBaseConfig.retryCount;
            _manualCalcUris = apiBaseConfig.manualCalcUris ?? false;
            _overrideHostHeader = apiBaseConfig.overrideHostHeader ?? false;
            _serializationSettings = apiBaseConfig.serializationSettings;
            _deserializationSettings = apiBaseConfig.deserializationSettings;
            _customHeaders = apiBaseConfig.customHeaders;
            _ignoreSslPolicyErrors = apiBaseConfig.ignoreSslPolicyErrors ?? false;
        }
@EmptyLine

        protected ApiBase(IApiBaseConfig apiBaseConfig, EventHandler<MetricSendEventArgs> metricEvent, EventHandler<ErrorEventArgs> errorEvent) : this(apiBaseConfig)
        {
            if (metricEvent != null)
                _metricSendEvent += metricEvent;

            if (errorEvent != null)
                _errorEvent += errorEvent;
        }
@EmptyLine

        public virtual JsonSerializerSettings SerializationSettings =>
            _serializationSettings ?? (_serializationSettings =
                new JsonSerializerSettings
                {
                    Formatting = Formatting.Indented,
                    DateFormatHandling = DateFormatHandling.IsoDateFormat,
                    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    ContractResolver = new ReadOnlyJsonContractResolver(),
                    Converters = new List<JsonConverter> { new Iso8601TimeSpanConverter() }
                });

@EmptyLine
        public virtual JsonSerializerSettings DeserializationSettings =>
            _deserializationSettings ?? (_deserializationSettings =
                new JsonSerializerSettings
                {
                    DateFormatHandling = DateFormatHandling.IsoDateFormat,
                    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    ContractResolver = new ReadOnlyJsonContractResolver(),
                    Converters = new List<JsonConverter> { new Iso8601TimeSpanConverter() }
                });
@EmptyLine
        protected async Task InvokeNewRequest(
            string metricName,
            RequestParameters parameters)
        {
            await InvokeNewRequest<dynamic>(metricName, parameters);
        }
@EmptyLine
        protected async Task<TResult> InvokeNewRequest<TResult>(
           string metricName,
           RequestParameters parameters)
        {
            var watch = Stopwatch.StartNew();
            ExecuteResult executeResult = null;
            try
            {
                var request = new HttpRequestCommand(
                            _name,
                            _settings,
                            _timeout,
                            _retryCount,
                            SerializationSettings,
                            parameters.HttpVerb,
                            parameters.RestUrl,
                            parameters.QueryParameters,
                            parameters.CustomHeaders,
                            parameters.Body,
                            _manualCalcUris,
                            _overrideHostHeader,
                            _ignoreSslPolicyErrors);

                executeResult = await request.ExecuteAsync();

                if (!executeResult.IsOK)
                {
                    throw executeResult.GetExeptions();
                }

                var statusCode = executeResult.Status;
                var responseContent = executeResult.Results;

                if (statusCode != 200)
                {
                    throw new Exception($"Operation returned an invalid status code '{statusCode}'");
                }

                try
                {
                    var responseDto = JsonConvert.DeserializeObject<TResult>(responseContent, DeserializationSettings);
                    return responseDto;
                }
                catch (Exception ex)
                {
                    throw new Exception("Operation returned unexpected DTO type or invalid unsupported format", ex);
                }
            }
            catch (Exception ex)
            {
                _errorEvent?.Invoke(this, new ErrorEventArgs { Exception = ex, RouteName = metricName, ExecuteResult = executeResult, Payload = parameters});
                throw;
            }
            finally
            {
                var tags = new Dictionary<string, object>();

                if (executeResult != null)
                {
                    tags.Add("RetryCount", executeResult.RetryCount);
                    tags.Add("Status", executeResult.Status);
                    tags.Add("TotalReceivedBytes", executeResult.TotalReceivedBytes);
                }

                _metricSendEvent?.Invoke(this,
                    new MetricSendEventArgs
                    {
                        Name = metricName,
                        ElapsedMilliseconds = watch.ElapsedMilliseconds,
                        Tags = tags
                    });
            }
        }
@EmptyLine
        public class MetricSendEventArgs : EventArgs
        {
            public long ElapsedMilliseconds { get; set; }
            public string Name { get; set; }
            public Dictionary<string, object> Tags { get; set; }
        }
@EmptyLine
        public class RequestParameters
        {
            public Verbs HttpVerb { get; set; }
            public string RestUrl { get; set; }
            public Dictionary<string, object> QueryParameters { get; set; }
            public Dictionary<string, string> CustomHeaders { get; set; }
            public object Body { get; set; }
        }
@EmptyLine
        public class HttpRequestCommand
        {
            private const string JsonContentType = "application/json";
            private readonly string _name;
            private readonly Verbs _verb;
            private readonly Lazy<string> _url;
            private readonly Dictionary<string, string> _customHeaders;
            private readonly Lazy<byte[]> _requestContent;
            private readonly JsonSerializerSettings _serializationSettings;
            private readonly List<ServerSettings> _settings;
            private readonly int _retryCount;
            private readonly TimeSpan _timeout;
            private readonly bool _manualCalcUris;
            private readonly bool _overrideHostHeader;
            private readonly bool _ignoreSslPolicyErrors;

            internal HttpRequestCommand(
                string name,
                List<ServerSettings> settings,
                TimeSpan timeout,
                int retryCount,
                JsonSerializerSettings serializationSettings,
                Verbs httpVerb,
                string restUrl,
                Dictionary<string, object> queryParameters,
                Dictionary<string, string> customHeaders = null,
                object body = null,
                bool manualCalcUris = false,
                bool overrideHostHeader = false,
                bool ignoreSslPolicyErrors = false)
            {
                _name = name;
                _timeout = timeout;
                _retryCount = retryCount;
                _settings = settings;
                _verb = httpVerb;
                _url = new Lazy<string>(() => GetUrl(restUrl, queryParameters));
                _serializationSettings = serializationSettings;
                _customHeaders = customHeaders;
                _requestContent = new Lazy<byte[]>(() => GetRequestContent(httpVerb, body));
                _manualCalcUris = manualCalcUris;
                _overrideHostHeader = overrideHostHeader;
                _ignoreSslPolicyErrors = ignoreSslPolicyErrors;
            }
@EmptyLine
            private bool CertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
            {
                // make sure we only ignore our request
                var request = sender as WebRequest;
                return request?.RequestUri.ToString().EndsWith(_url.Value) == true;
            }
@EmptyLine        
            internal async Task<ExecuteResult> ExecuteAsync()
            {
                // should be applied on request level, awaiting release of round robin client v2
                // always apply, setting might be overridden 
                if (_ignoreSslPolicyErrors)
                {
                    ServicePointManager.ServerCertificateValidationCallback += CertificateValidationCallback;
                }

                var timeout = (int)_timeout.TotalMilliseconds;
                var httpClient = new HttpClient(_name, _settings, JsonContentType, timeout, _retryCount, "", manualCalcUris: _manualCalcUris, overrideHostHeader: _overrideHostHeader);

                var result = await httpClient.ExecuteAsync(
                    _verb,
                    _url.Value,
                    _requestContent?.Value,
                    false,
                    new ErrorList(),
                    true,
                    _customHeaders);

                return result;
            }
@EmptyLine
            protected byte[] GetRequestContent(Verbs verb, object body)
            {
                if (body != null)
                    return Encoding.UTF8.GetBytes(SafeJsonConvert.SerializeObject(body, _serializationSettings));
                return verb == Verbs.GET ? null : new byte[0];
            }
@EmptyLine
            protected string GetUrl(string restUrl, Dictionary<string, object> queryParameters)
            {
                var url = restUrl;
                foreach (var parameterName in queryParameters.Keys)
                {
                    var rawValue = queryParameters[parameterName];
                    var jsonValue = SafeJsonConvert
                        .SerializeObject(rawValue, _serializationSettings)
                        .Trim('"');
                    var urlValue = Uri.EscapeDataString(jsonValue);
                    url = url.Replace($"{{{parameterName}}}", urlValue);
                }
                return url;
            }
        }
    }
}
